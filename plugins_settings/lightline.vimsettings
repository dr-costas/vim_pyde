" ~/.myvim_files/plugins_settings/lightline_settings.vim file starts
"
" ==================================
" Lightline settings file
" ==================================
"
" Set last status to 2 so Lightline can work properly
set laststatus=2
"
" Set the options for lightline
let g:lightline = {
	\ 'colorscheme': 'jellybeans',
	\ 'active': {
	\   'left': [ [ 'mode', 'paste', 'readonly' ], 
	\			  [ 'fugitive' ],
    \             [ 'filename', 'separator', 'modified' ]
	\		    ],
    \   'right': [ [ 'lineinfo' ],
    \              [ 'percent' ],
    \              [ 'fileformat', 'fileencoding', 'filetype', ] ]
	\ },
	\ 'inactive': {
	\   'left': [ [ 'fugitive' ],
    \             [ 'filename', 'separator', 'modified' ]
	\		    ],
    \   'right': [ [ 'lineinfo' ],
    \              [ 'filetype', ] ]
	\ },
    \ 'tabline': {
    \   'left': [ [ 'bufferinfo' ],
    \             [ 'separator' ],
    \             [ 'bufferbefore', 'buffercurrent', 'bufferafter' ], ],
    \   'right': [ [ 'clock' ], ],
    \ },
	\ 'component_expand': {
    \   'buffercurrent': 'lightline#buffer#buffercurrent',
    \   'bufferbefore': 'lightline#buffer#bufferbefore',
    \   'bufferafter': 'lightline#buffer#bufferafter',
    \ },
	\ 'component_function': {
	\   'fugitive': 'LightlineFugitive',
	\   'filename': 'LightlineFilename',
    \   'bufferinfo': 'lightline#buffer#bufferinfo',
	\	'clock': 'ShowTime',
	\ },
    \ 'component_type': {
    \   'buffercurrent': 'tabsel',
    \   'bufferbefore': 'raw',
    \   'bufferafter': 'raw',
    \ }
	\ }
" 'right': [ [ 'clock', 'close' ], ],
" ----------------------------------------------------------
" Functions
" ----------------------------------------------------------
"
" Function to check if the file has been modified
function! LightlineModified()
	return &ft =~# 'help\|vimfiler' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction
"
" Function to check the read-only property
function! LightlineReadonly()
	return &ft !~? 'help\|vimfiler' && &readonly ? 'RO' : ''
endfunction
"
" Function to get the current branch from Fugitive
function! LightlineFugitive()
	if &ft !~? 'vimfiler' && exists('*FugitiveHead')
		return FugitiveHead()
	endif
	return ''
endfunction
" 
" Function to use the path of a file relative to current  dir.
function! LightlineFilename()
  let root = fnamemodify(get(b:, 'git_dir'), ':h')
  let path = expand('%:p')
  if path[:len(root)-1] ==# root
    return path[len(root)+1:]
  endif
  return expand('%')
endfunction
"
function! ShowTime()
	return strftime('%c')
endfunction
"
function! UpdateStatus(timer)
	redrawtabline
endfunction
"
let statusTimer = timer_start(1000, 'UpdateStatus', {'repeat': -1})
"
command LightlineReload call LightlineReload()

function! LightlineReload()
	call lightline#init()
	call lightline#colorscheme()
	call lightline#update()
endfunction
" Function for getting the buffers
" function! BufferlineFunction()
"   call bufferline#refresh_status()
"   let b = g:bufferline_status_info.before
"   let c = g:bufferline_status_info.current
"   let a = g:bufferline_status_info.after
"   let alen = strlen(a)
"   let blen = strlen(b)
"   let clen = strlen(c)
"   let w = winwidth(0) * 4 / 9
"   if w < alen+blen+clen
"     let whalf = (w - strlen(c)) / 2
"     let aa = alen > whalf && blen > whalf ? a[:whalf] : alen + blen < w - clen || alen < whalf ? a : a[:(w - clen - blen)]
"     let bb = alen > whalf && blen > whalf ? b[-(whalf):] : alen + blen < w - clen || blen < whalf ? b : b[-(w - clen - alen):]
"     return (strlen(bb) < strlen(b) ? '...' : '') . bb . c . aa . (strlen(aa) < strlen(a) ? '...' : '')
"   else
"     return b . c . a
"   endif
" endfunction 
" function! BufferlineFunction()
"   call bufferline#refresh_status()
"   let b = g:bufferline_status_info.before
"   let c = g:bufferline_status_info.current
"   let a = g:bufferline_status_info.after
"   return b . c . a
" endfunction
"
" EOF
